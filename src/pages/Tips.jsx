import React from "react";
import "./Tips.css";

const Tips = () => {
  return (
    <div className="tips-container">
      <h1>üîß Consejos √ötiles para Programar en ASM</h1>

      {/* Introducci√≥n */}
      <section className="section">
        <h2>üìå Introducci√≥n</h2>
        <p>
          Programar en ensamblador puede ser complicado, pero siguiendo ciertas
          buenas pr√°cticas y consejos, podr√°s escribir c√≥digo m√°s limpio,
          eficiente y f√°cil de depurar. En esta secci√≥n, te compartimos algunos
          consejos pr√°cticos para mejorar tu experiencia programando en NASM.
        </p>
      </section>

      {/* Consejos generales */}
      <section className="section">
        <h2>‚ö° Consejos Generales</h2>
        <ul>
          <li>
            <strong>Escribe c√≥digo modular:</strong> Divide tu c√≥digo en secciones
            o procedimientos peque√±os y reutilizables. Esto hace que sea m√°s f√°cil
            entender, mantener y depurar el c√≥digo.
          </li>
          <li>
            <strong>Comentarios claros:</strong> Usa comentarios descriptivos para
            explicar lo que hace cada bloque de c√≥digo. No asumas que lo recordar√°s
            todo; otros (o t√∫ mismo en el futuro) necesitar√°n entender lo que has
            hecho.
          </li>
          <li>
            <strong>Optimiza el uso de registros:</strong> Los registros son
            limitados, as√≠ que usa los registros de forma eficiente. Cuando sea
            posible, reutiliza registros o usa memoria si no puedes evitar usar m√°s
            registros.
          </li>
          <li>
            <strong>Minimiza el uso de saltos condicionales:</strong> Aunque los
            saltos pueden ser √∫tiles, abusar de ellos puede hacer que el flujo del
            programa sea dif√≠cil de seguir. Usa saltos solo cuando sean necesarios.
          </li>
          <li>
            <strong>Presta atenci√≥n a las instrucciones de acceso a memoria:</strong> 
            El acceso a memoria puede ser lento. Aseg√∫rate de que tus accesos a
            memoria sean eficientes, evitando accesos innecesarios.
          </li>
        </ul>
      </section>

      {/* Consejos para la depuraci√≥n */}
      <section className="section">
        <h2>üîç Consejos para Depurar</h2>
        <ul>
          <li>
            <strong>Usa GDB para depurar:</strong> GDB es una herramienta excelente
            para depurar c√≥digo ensamblador. Coloca puntos de interrupci√≥n en lugares
            clave, examina los registros y el flujo de ejecuci√≥n para encontrar
            errores.
          </li>
          <li>
            <strong>Verifica los registros y la memoria:</strong> Cuando tengas
            errores, inspecciona los valores de los registros y la memoria en GDB
            para asegurarte de que los valores se est√°n almacenando correctamente.
          </li>
          <li>
            <strong>Prueba tu c√≥digo en etapas:</strong> En lugar de escribir todo
            el c√≥digo de una vez, prueba secciones de tu programa a medida que
            avanzas. Esto te permitir√° detectar errores m√°s temprano en el proceso.
          </li>
          <li>
            <strong>Agrega instrucciones de depuraci√≥n:</strong> Usa instrucciones
            como <code>mov</code> para almacenar valores en registros y luego
            imprimirlos en la consola o verlos en un depurador.
          </li>
          <li>
            <strong>Analiza el flujo de ejecuci√≥n:</strong> Utiliza herramientas como
            <code>strace</code> o <code>ltrace</code> para rastrear las llamadas al
            sistema y asegurarte de que el flujo de ejecuci√≥n de tu c√≥digo sea el
            esperado.
          </li>
        </ul>
      </section>

      {/* Consejos de optimizaci√≥n */}
      <section className="section">
        <h2>‚öôÔ∏è Consejos para Optimizar C√≥digo</h2>
        <ul>
          <li>
            <strong>Usa las instrucciones m√°s eficientes:</strong> Algunas
            instrucciones en NASM son m√°s r√°pidas que otras. Aseg√∫rate de usar las
            instrucciones m√°s eficientes en t√©rminos de rendimiento para cada tarea.
          </li>
          <li>
            <strong>Evita operaciones costosas:</strong> Las operaciones de
            multiplicaci√≥n y divisi√≥n pueden ser mucho m√°s lentas que las sumas y
            restas. Siempre que sea posible, usa sumas o restas en lugar de
            multiplicaci√≥n.
          </li>
          <li>
            <strong>Evita la repetici√≥n de c√°lculos:</strong> Si necesitas usar un
            valor o resultado varias veces, gu√°rdalo en un registro o en memoria
            temporalmente en lugar de volver a calcularlo.
          </li>
          <li>
            <strong>Reduce la cantidad de saltos:</strong> El uso excesivo de saltos
            puede hacer que el flujo de ejecuci√≥n del programa sea m√°s dif√≠cil de
            seguir, lo que puede aumentar el riesgo de errores. Usa saltos solo cuando
            sean absolutamente necesarios.
          </li>
          <li>
            <strong>Utiliza t√©cnicas de optimizaci√≥n de memoria:</strong> Organiza tus
            variables en la memoria para que los accesos sean lo m√°s r√°pido posible,
            evitando accesos innecesarios a la memoria.
          </li>
        </ul>
      </section>

      {/* Consejos para la organizaci√≥n del proyecto */}
      <section className="section">
        <h2>üóÇÔ∏è Consejos para Organizar tu Proyecto</h2>
        <ul>
          <li>
            <strong>Usa un archivo de encabezado:</strong> Mant√©n un archivo de
            encabezado separado con definiciones de constantes y macros para que tu
            c√≥digo sea m√°s limpio y reutilizable.
          </li>
          <li>
            <strong>Comenta tu c√≥digo correctamente:</strong> Agrega comentarios
            al inicio de cada secci√≥n de tu c√≥digo para describir qu√© hace cada parte.
            Adem√°s, documenta el prop√≥sito de los procedimientos y funciones.
          </li>
          <li>
            <strong>Usa un sistema de control de versiones:</strong> Utiliza Git o
            cualquier otra herramienta de control de versiones para realizar un
            seguimiento de las versiones de tu c√≥digo y colaborar con otros.
          </li>
          <li>
            <strong>Divide tu c√≥digo en m√≥dulos:</strong> Para proyectos m√°s grandes,
            organiza tu c√≥digo en m√≥dulos o archivos independientes para mejorar la
            mantenibilidad.
          </li>
          <li>
            <strong>Usa la convenci√≥n de nombres consistente:</strong> Aseg√∫rate de
            usar una convenci√≥n de nombres coherente para etiquetas, procedimientos
            y variables, lo que facilitar√° la comprensi√≥n de tu c√≥digo a otros
            desarrolladores.
          </li>
        </ul>
      </section>

      {/* Consejos para evitar errores comunes */}
      <section className="section">
        <h2>‚ùå Errores Comunes a Evitar</h2>
        <ul>
          <li>
            <strong>Olvidar inicializar registros:</strong> Muchos errores en c√≥digo
            ASM se deben a registros no inicializados. Aseg√∫rate de inicializar los
            registros antes de usarlos.
          </li>
          <li>
            <strong>Errores con las direcciones de memoria:</strong> Siempre que
            trabajes con memoria, verifica las direcciones que est√°s utilizando para
            evitar errores de acceso ilegal.
          </li>
          <li>
            <strong>Confundir los tipos de datos:</strong> Aseg√∫rate de que los datos
            que est√°s manipulando coincidan con el tipo adecuado (por ejemplo, enteros
            de 32 bits vs 64 bits).
          </li>
          <li>
            <strong>No verificar los valores de retorno:</strong> Al hacer llamadas
            al sistema, siempre verifica los valores de retorno para asegurarte de que
            no haya errores de ejecuci√≥n.
          </li>
          <li>
            <strong>Confundir el uso de registros y memoria:</strong> Es f√°cil
            equivocarse entre usar registros o memoria. Aseg√∫rate de entender c√≥mo
            funcionan y cu√°ndo usar cada uno.
          </li>
        </ul>
      </section>
    </div>
  );
};

export default Tips;
